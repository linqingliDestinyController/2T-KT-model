import dataclasses
knowledge_graph_info = '''
Basic Class:
- Find a common denominator
- Simplify before subtracting
- Column borrow to subtract the second numerator from the first
- Separate a whole number from a fraction
  - Pre-knowledge: Find a common denominator
  - Pre-knowledge: Simplify before subtracting
- Borrow from whole number part
  - Pre-knowledge: Separate a whole number from a fraction
  - Pre-knowledge: Find a common denominator

Implement Class:
-Subtract numerators
-Reduce answers to simplest form
  

Relationships between Classes:
- Find a common denominator -> Application: Subtract numerators
- Simplify before subtracting -> Application: Reduce answers to simplest form
- Column borrow to subtract the second numerator from the first -> Application: Subtract numerators

New skill: Convert a whole number to a fraction
1 This skill connects with "Separate a whole number from a fraction with relation: 'Pre-knowledge'
2 This skill connects with 'Borrow from whole number part' with relation: 'Pre-knowledge'
'''

advice = '''
You should consider the skill information when you make a prediction. The skill information as follows:
Find a common denominator: This involves identifying the smallest number that each denominator can divide into evenly, allowing fractions with different denominators to be added or subtracted.
 "Simplify before subtracting: It's a step where you reduce fractions to their simplest form, if possible, before performing the subtraction to avoid complications during the calculation process. 
 'Column borrow to subtract the second numerator from the first: When the first numerator is smaller than the second, you borrow from the whole number part of the larger fraction to make the numerators the same column or place value before subtracting.
 "Separate a whole number from a fraction: This concept refers to distinguishing between a whole number and a fractional part when they're combined, often by converting the whole number to a fraction with the same denominator as the fractional part.
 "Borrow from whole number part: In subtraction involving mixed numbers, if the top number (numerator) of the fraction part isn't large enough to subtract, you borrow from the whole number part to make the necessary adjustment.
 'Subtract numerators: This is the step in which you perform the subtraction operation specifically on the numerators of the fractions while keeping the denominators the same.
 'Reduce answers to simplest form: After performing arithmetic operations on fractions, you express the result in its simplest form by finding the greatest common divisor and dividing both the numerator and the denominator by it.
 'Convert a whole number to a fraction: This involves representing a whole number as a fraction with a denominator of 1, ensuring that it can be combined with other fractions in calculations.'''

GLM_SPARSE_SYSTEM_INSTRUCTION = '''
You are a knowledge tracking model that predicts whether a student will be able to get a new question right when he encounters it based on his history of doing the question, and the knowledge concepts in the question.
Give the format of the history of exercising as follows: each exercise information begins with <Exercise exercise_id> and ends with <END Exercise exercise_id>, the knowledge graph information begin with <Knowledge graph information> and ends with <END knowledge graph information>, and the advice begin with <Advice> and ends with <END Advice>

<Exercise exercise_id>
knowledge concepts: [knowledge concepts descriptions in the exercise],
is_correct: 0 or 1
<END Exercise exercise_id>

<Knowledge graph information>
knowledge graph info: [the student subgraph information]
<END Knowledge graph information>

<Advice>
The advice is here
<END Advice>


Then, a question and corresponding knowledge points will be given, and you need to predict whether the student will be able to answer these questions correctly or not.
The output should only be 0 or 1, 1 for correct and 0 for incorrect. no other explanation is needed.
'''


GLM_SPARSE_FEWSHOT_USER_EXAMPLE = ''''''# only used when not generated by llms
GLM_SPARSE_PREDICT_INSTRUCTION = '''
You many need to correct some errors in the knowledge graph such as some knowledge concepts lacking relations or incorrect relations between different knowledge concepts . Base on the system instructions, a few shots, advice, updated knowledge graph information, and other information above. You can choose to accept the advice or ignore it. Only respond with only one 0 or 1 to predict the student can answer <Exercise to Predict> correctly or not.
'''
GLM_SPARSE_ANALYSIS_INSTRUCTION = '''
Analyze the student knowledge state by the exercise logs and knowledge graph information above.
'''
GLM_SPARSE_EXPLAINATION_INSTRUCTION = '''
Now, you are a teacher analysing the student's performance in the previous question.
The student's ability to get this question right depends on many factors, so please analyze why the student performed as shown above in the previous question in the following ways, taking into account the given record of doing the question as well as the historical analysis.
1. Find out the knowledge points involved in the new question, it will follow the format of "knowledge concepts: ['kc1', 'kc2'...]"

The new exercise contains <knowledge points 1>, <knowledge points 2, ...>

2. analyze the link between the question and the topic in the student's record of work: is the question new, and does the knowledge point in this question exist in previous questions based on the knowledge graph? with the following format:
Similar to question <q1,q2... > or It's a new question, there is <some kind of> connection between the previous knowledge points and questions.

3. For Student's mastery of knowledge, update the knowledge state based on the current question and the previous exercises with the following format:

Student's Knowledge state:
<previous knowledge points 1, good/fair/bad>, <previous knowledge points 2, good/fair/bad>, <previous knowledge points 3, good/fair/bad> ...
<knowledge points 1 in this exercise, good/fair/bad>, <knowledge points 2 in this exercise, good/fair/bad> ...

4. whether the student mastered the knowledge points involved in the question, whether there is carelessness and other reasons to get the question wrong? with the following format:
The student gets it <right, wrong>, <almost impossible, possible, likely> because of <guessing, mastery> / <carelessness, incorrect mastery>.

Explain the result, no additional warnings or PREDICTION needed.
'''

GLM_SPARSE_SELF_REFLECTION_INSTRUCTION = ''''''
GPT_SPARSE_SYSTEM_INSTRUCTION = f'{GLM_SPARSE_SYSTEM_INSTRUCTION}'
GPT_SPARSE_FEWSHOT_USER_EXAMPLE = f'{GLM_SPARSE_FEWSHOT_USER_EXAMPLE}'
GPT_SPARSE_PREDICT_INSTRUCTION = '''
Base on the system instructions, fewshots and information above, predict the student can answer the last <Exercise to Predict> correctly or not. Only respond with one 0 or 1.
'''
GPT_SPARSE_ANALYSIS_INSTRUCTION = f'{GLM_SPARSE_ANALYSIS_INSTRUCTION}'
GPT_SPARSE_EXPLAINATION_INSTRUCTION = f'{GLM_SPARSE_EXPLAINATION_INSTRUCTION}'
GPT_SPARSE_SELF_REFLECTION_INSTRUCTION = f'{GLM_SPARSE_SELF_REFLECTION_INSTRUCTION}'
FEW_SHOT_RESPONSE_EXMAPLE = '0'

model_sp_sys_instr = {
    'glm': GLM_SPARSE_SYSTEM_INSTRUCTION,
    'gpt': GPT_SPARSE_SYSTEM_INSTRUCTION
}
model_sp_fewshot_u_ex = {
    'glm': GLM_SPARSE_FEWSHOT_USER_EXAMPLE,
    'gpt': GPT_SPARSE_FEWSHOT_USER_EXAMPLE
}
model_sp_fewshot_s_ex = {
    'glm': FEW_SHOT_RESPONSE_EXMAPLE,
    'gpt': FEW_SHOT_RESPONSE_EXMAPLE
}
model_sp_predict_instr = {
    'glm': GLM_SPARSE_PREDICT_INSTRUCTION,
    'gpt': GPT_SPARSE_PREDICT_INSTRUCTION
}
model_sp_analysis_instr = {
    'glm': GLM_SPARSE_ANALYSIS_INSTRUCTION,
    'gpt': GPT_SPARSE_ANALYSIS_INSTRUCTION
}
model_sp_explain_instr = {
    'glm': GLM_SPARSE_EXPLAINATION_INSTRUCTION,
    'gpt': GPT_SPARSE_EXPLAINATION_INSTRUCTION
}
model_sp_self_refl_instr = {
    'glm': GLM_SPARSE_SELF_REFLECTION_INSTRUCTION,
    'gpt': GPT_SPARSE_SELF_REFLECTION_INSTRUCTION
}